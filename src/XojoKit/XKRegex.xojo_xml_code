<?xml version="1.0" encoding="UTF-8"?>
<RBProject version="2022r1" FormatVersion="2" MinIDEVersion="20210300">
<block type="Module" ID="1333041151">
 <ObjName>XKRegex</ObjName>
 <ObjContainerID>1262106623</ObjContainerID>
 <IsClass>1</IsClass>
 <ItemFlags>1</ItemFlags>
 <IsInterface>0</IsInterface>
 <Compatibility></Compatibility>
 <Method>
  <ItemName>Constructor</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1977520127</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub Constructor(pattern As String, caseSensitive As Boolean = False)</SourceLine>
   <SourceLine>mPattern = pattern</SourceLine>
   <SourceLine>mRegex = New RegExMBS</SourceLine>
   <SourceLine>SetDefaults</SourceLine>
   <SourceLine>mRegex.CompileOptionCaseLess = Not caseSensitive</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>If Not mRegex.Compile(mPattern) Then</SourceLine>
   <SourceLine>Raise New InvalidArgumentException("Unable to compile `pattern`.")</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Populate the named groups dictionary with any named groups in the pattern.</SourceLine>
   <SourceLine>NamedGroups = New Dictionary</SourceLine>
   <SourceLine>If mRegex.InfoNameCount &gt; 0 Then</SourceLine>
   <SourceLine>For i As Integer = 1 To mRegex.InfoNameCount</SourceLine>
   <SourceLine>NamedGroups.Value(mRegex.InfoNameEntry(i)) = ""</SourceLine>
   <SourceLine>Next i</SourceLine>
   <SourceLine>End If</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>pattern As String, caseSensitive As Boolean = False</ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Method>
  <ItemName>Match</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Searches `s` using the regex pattern defined at instantiation returning True if there's a successful match.</CodeDescription>
  <PartID>1563621375</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function Match(s As String) As Boolean</SourceLine>
   <SourceLine>/// Searches `s` using the regex pattern defined at instantiation returning True if there's a successful match.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Clear out the existing named group values.</SourceLine>
   <SourceLine>Var keys() As Variant = NamedGroups.Keys</SourceLine>
   <SourceLine>For Each key As String In keys</SourceLine>
   <SourceLine>NamedGroups.Value(key) = ""</SourceLine>
   <SourceLine>Next key</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Var result As Boolean = mRegex.Match(s)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Call mRegex.Execute(s)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>// Update the named groups.</SourceLine>
   <SourceLine>For Each key As String In keys</SourceLine>
   <SourceLine>NamedGroups.Value(key) = mRegex.Substring(key)</SourceLine>
   <SourceLine>Next key</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>Return result</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams>s As String</ItemParams>
  <ItemResult>Boolean</ItemResult>
 </Method>
 <Method>
  <ItemName>SetDefaults</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>Sets some sensible defaults for the class.</CodeDescription>
  <PartID>798054399</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub SetDefaults()</SourceLine>
   <SourceLine>/// Sets some sensible defaults for the class.</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>mRegex.CompileOptionCaseLess = True</SourceLine>
   <SourceLine>mRegex.CompileOptionDotAll = False</SourceLine>
   <SourceLine>mRegex.CompileOptionUngreedy = False</SourceLine>
   <SourceLine>mRegex.CompileOptionNewLineAnyCRLF = True</SourceLine>
   <SourceLine>mRegex.ExecuteOptionNewLineAnyCRLF = true</SourceLine>
   <SourceLine>mRegex.ExecuteOptionNotEmpty = False</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <AliasName></AliasName>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
  <ItemParams></ItemParams>
  <ItemResult></ItemResult>
 </Method>
 <Note>
  <ItemName>About</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1189375999</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <NoteLine>About</NoteLine>
   <NoteLine>This is a wrapper class for easily running simple regex queries against a line of text. Assumes that the </NoteLine>
   <NoteLine>regex pattern used at instantiation contains NAMED capture groups.</NoteLine>
   <NoteLine></NoteLine>
  </ItemSource>
  <ItemFlags>0</ItemFlags>
 </Note>
 <Property>
  <ItemName>mPattern</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1747671039</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mPattern As String</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mPattern As String</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>mRegex</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <PartID>1455288319</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>mRegex As RegExMBS</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>mRegex As RegExMBS</ItemDeclaration>
  <ItemFlags>33</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <Property>
  <ItemName>NamedGroups</ItemName>
  <Compatibility></Compatibility>
  <Visible>1</Visible>
  <CodeDescription>A dictionary containing any named groups in the compiled patterns. After `Match()` the values are populated. Key = Group Name, Value = Group Value.</CodeDescription>
  <PartID>433870847</PartID>
  <ItemSource>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>NamedGroups As Dictionary</SourceLine>
   <SourceLine></SourceLine>
  </ItemSource>
  <TextEncoding>134217984</TextEncoding>
  <ItemDeclaration>NamedGroups As Dictionary</ItemDeclaration>
  <ItemFlags>0</ItemFlags>
  <IsShared>0</IsShared>
 </Property>
 <ViewBehavior>
  <ViewProperty>
   <ObjName>Name</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Index</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <PropertyValue>-2147483648</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Super</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>ID</PropertyGroup>
   <ItemType>String</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Left</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
  <ViewProperty>
   <ObjName>Top</ObjName>
   <Visible>1</Visible>
   <PropertyGroup>Position</PropertyGroup>
   <PropertyValue>0</PropertyValue>
   <ItemType>Integer</ItemType>
  </ViewProperty>
 </ViewBehavior>
</block>
</RBProject>
